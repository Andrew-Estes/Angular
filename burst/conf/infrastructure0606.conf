# -----------------------------------------------------------------------------
# FILE: infrastructure.conf                                                     
#                                                                               
# This file dictates run parameters for the bursting process.  The bursting     
# process will watch for changes to this file and attempt to accomodate changes 
# on-the-fly.  Please use caution when changing values.                         
# -----------------------------------------------------------------------------




# ----------------------------------------------------------------------------- 
# TRACE, STATS: The 'logger' trace output and performance statistics.  The      
# period specifications determine how long each log should run before being     
# rolled over to a new filename, given in minutes (1440 = 24h).  The trace      
# level may be limited by the build trace level so that the higher of the two   
# is used.  For instance, if the app was compiled with a level of 'limited'     
# then a config trace level of 'debug' use the 'limited' level insted.  The     
# valid trace levels are, from least to most verbose: NONE, DISABLE, QUIET,     
# VERBOSE, and DEBUG.  NONE and DISABLE have the same effect of turning off all 
# trace output.  If the compile and config trace levels are both DEBUG, then    
# all trace statements will be printed.  Filenames may include percent tokens   
# similar to the UNIX date timestamp utility, as well as a servername spec and  
# first and last message ID listed in the data file (for message dump data      
# files).                                                                       
#                                                                               
# Which data is to be stored is controlled by the data 'store' traits.  The TPF 
# request messages are the messages received from TPF, the response is the      
# final output response returned to TPF, the NGGF queries are the bursted       
# generated by splash and sent to NGGF, and the NGGF replies are the responses  
# received back from NGGF.                                                      
#                                                                               
# The following format sequences are provided for file name specifications:     
#                                                                               
#     %Y: Year, 4 char, eg. 2010                                                
#     %y: Year, 2 char, eg. 10                                                  
#     %m: month, 2 char, eg. 04 for April                                       
#     %b: Month, 3 char, eg. JAN for January                                    
#     %B: Month full name, eg. "January"                                        
#     %d: day of month, 2 char, 01 through 31                                   
#     %D: Date, 20100507 for May 7, 2010                                        
#     %H: Hour, 2 char, 24 hour, 13 for 1:00 pm                                 
#     %I: Hour, 2 char, 12 hour                                                 
#     %M: minute, 2 char                                                        
#     %P: "AM"/"PM"                                                             
#     %p: "am"/"pm"                                                             
#     %T: Timestamp, same as %H%M, 1307 for 1:07 pm                             
#                                                                               
#     %+: Same as %Y%m%d-%H%N, eg. "20100509-1307" for 9 May 2010, 1:07 pm      
#                                                                               
#     %f: First message ID included in the file, 6 chars                        
#     %l: Last message ID included in the file, 6 chars                         
#     %v: Servername, eg "vhldvgfbu001"                                         
#     %%: Percent character, "%"                                                
# ----------------------------------------------------------------------------- 

Trace.directory:           /mnt/splash/logs
Trace.filename:            splash-%v-%D-%T.log
Trace.writeBufferSizeK:    4
Trace.queueKey:            0x000B1FF0   # honored at startup only 
Trace.burstLevel:          DEBUG
Trace.recombineLevel:      DEBUG
Trace.merchBurstLevel:     DEBUG
Trace.merchRecombineLevel: DEBUG
Trace.infrastructureLevel: VERBOSE
Trace.periodMins:          1440 # twenty-four hours
Trace.offsetMins:          0    # change to new file at midnight 

Stats.directory:           /mnt/splash/logs/stats
Stats.filename:            perf-%v-%D-%T.csv
Stats.writeBufferSizeK:    4
Stats.queueKey:            0x000B1FF1   # honored at startup only 
Stats.periodMins:          60 # one hour
Stats.offsetMins:          0  # change to new file at midnight 

Data.directory:            /mnt/splash/logs/data
Data.tpfQueryNsme:         tpf-request-%D-%T-%f-%l.cpio
Data.tpfReplyNsme:         tpf-response-%D-%T-%f-%l.cpio
Data.nggfQueryNsme:        nggf-query-%D-%T-%f-%l.cpio
Data.nggfReplyNsme:        nggf-reply-%D-%T-%f-%l.cpio
Data.writeBufferSizeK:     4
Data.tpfQueryQueueKey:     0x000B1FF2   # honored at startup only 
Data.tpfReplyQueueKey:     0x000B1FF3   # honored at startup only 
Data.nggfQueryQueueKey:    0x000B1FF4   # honored at startup only 
Data.nggfReplyQueueKey:    0x000B1FF5   # honored at startup only 
Data.durationMins:         60   # one hour (see cutoff-method)
Data.offsetMins:           0    # change to new file at midnight 
Data.durationMsgs:         200  # 200 messages per file (see cutoff-method)
Data.durationCutoffMethod: MESG # One of MESG or TIME

#                                            --- TPF ---   -- NGGF ---
#                              Server        Query Reply   Query Reply
#                              ------------  ----- -----   ----- -----
Data.msgStorageTable:      ( ( VHLDVGFBU001,   yes,  yes,    yes,  yes ), \
                             ( VHLDVGFBU002,   yes,  yes,    yes,  yes ), \
                             ( L37HWXM,        yes,  yes,    yes,  yes ), \
                             (            *,   yes,  yes,    yes,  yes )  \
                           )




# -----------------------------------------------------------------------------
# TPF CONNECTIONS: A listener socket will wait for network connection requests  
# from the TPF.  The port and nbrAllowedConns set the port number and number of 
# allowed connections used in creating that listener socket.                    
# -----------------------------------------------------------------------------

TPF.port:                  9000   # honored at startup only 
TPF.nbrAllowedConns:       256


# -----------------------------------------------------------------------------
# THREADS: The number of burst, recombine and merchandise-recombine threads is 
# configurable to prevent potential bottlenecks caused by slow-to-process      
# messages, such as FLEX.  These define the number of each thread species for  
# each SPLASH instance, as well as the number of SPLASH instances running.     
# The thread counts are capped in InfrCoommon.h as MAX_NUMBER_RECOMBINE_THREADS
# and MAX_NUMBER_BURST_THREADS.  Any config values greater than those numbers  
# are corrected down to the MAX as a sanity check.                             
# -----------------------------------------------------------------------------

Threads.nbrBurst:          2   # honored at startup only 
Threads.nbrRecombine:      3   # honored at startup only 
Threads.nbrMercCombine:    1   # honored at startup only 
Threads.nbrSplash:         1   # ignored


# ----------------------------------------------------------------------------- 
# GATEWAY CONNECTION: Splash connects to the LCN4 complex through gateway hosts 
# which redirect traffic to the proper region.  The address for the gateways to 
# use is provided through the LDS web service at requestSvcAddr/port.   The     
# gateways will be connected with whatever address is returned and the gateway  
# port number.  Splash will first try to query the request-svc-addr host for an 
# address, then try the backup if that fails, then use its last value if both   
# fail.  If no backup address or port is supplied, then the backup request is   
# bypassed and splash falls back directly to the last used.   If the connection 
# is lost to a gateway, then splash will wait reconnect-delay delay-secs seconds
# before trying to re-establish a connection.  Socket messages to the gateway   
# that are longer than the zip-size-limit will be zipped before being sent to   
# the gateway.  The size specified includes the 25 byte message header.         
# ----------------------------------------------------------------------------- 

Gateway.numberConns:        1
Gateway.requestSvcAddr:     localhost
Gateway.requestSvcPort:     4010
Gateway.bkupRequestSvcAddr: localhost
Gateway.bkupRequestSvcPort: 4010
Gateway.reconnectDelaySecs: 1.0
Gateway.port:               2752
Gateway.msgZipSizeLimit:    63800


# ----------------------------------------------------------------------------- 
# DESTINATION FORWARDING: Destination forwarding replaces the incomming         
# destination with a translation based on the table below.  The table is        
# processed in order, so most frequently appearing incomming destinations       
# should appear at the top.  The wildcard, from='*', is a catch-all that allows 
# all destinations to forward to the given destination.  The catch-all          
# specification should appear at the end of the table.                          
# ----------------------------------------------------------------------------- 

#                              From     To      
#                              -------  ------- 
DestForwarding.table:      ( ( FQBSXPM, FQBCXPM ), \
                             ( FQBSXCO, FQBCXCO ), \
                             ( FQBSNON, FQBCNON ), \
                             ( FQBSNCO, FQBCNCO ), \
                             (       *, GFARBT6 )  \
                           )
DestForwarding.isEnabled:  yes


# ----------------------------------------------------------------------------- 
# AMBER LEVEL: These settings and table determine the handling of critical      
# issues that get reported to splash via a memcached query.  The query response 
# will correlate to the level provided in the table, and the efficincy listed   
# for that level will be transmitted to the application during burst for        
# handling.                                                                     
# ----------------------------------------------------------------------------- 

AmberLevel.isEnabled:      no
AmberLevel.hostname:       localhost
AmberLevel.port:           11211
AmberLevel.timeoutUsecs:   100
AmberLevel.checkConnSecs:  5

#                              Lvl  Discard % 
#                              ---  --------- 
AmberLevel.table:          ( (   0,         0 ), \
                             (   1,         0 ), \
                             (   2,        10 ), \
                             (   3,        20 ), \
                             (   4,        30 ), \
                             (   5,        40 ), \
                             (   6,        50 )  \
                           )

#                              Dest     Manual Key         Automatic Key
#                              -------  ------------------ -----------------
AmberLevel.keyTable:       ( ( FQBSXPM, proda_amber_manual, proda_amber_auto ), \
                             ( FQBCXPM, proda_amber_manual, proda_amber_auto ), \
                             ( FQBSXCO, prodb_amber_manual, prodb_amber_auto ), \
                             ( FQBCXCO, prodb_amber_manual, prodb_amber_auto ), \
                             ( FQBSNON, prod1_amber_manual, prod1_amber_auto ), \
                             ( FQBCNON, prod1_amber_manual, prod1_amber_auto ), \
                             ( FQBSNCO, prod2_amber_manual, prod2_amber_auto ), \
                             ( FQBCNCO, prod2_amber_manual, prod2_amber_auto ), \
                             ( *,       proda_amber_manual, proda_amber_auto )  \
                           )


# ----------------------------------------------------------------------------- 
# MONITOR: A monitor loop loops forever while SPLASH is running, looping every  
# loop-period-secs.  Each check-dead-messages-period-seconds it checks to see   
# if there are any active messages that are older than their timout sec spec    
# from the messages section and forces them to return.  This config file is     
# checked every check-config-file-secs to see if there are any changes, and     
# re-reads the values if changes are found.  The loop also checks the connected 
# adapters (gateways) every check-adapter-conns-secs to make sure all of the    
# expected adapters are connected, and connects them if not.  If use-server-    
# history-interval is set to yes, then each promote-server-history-seconds the  
# current server history statistics will be promoted up to the cumulative       
# statistics and the current history reset.  The monitor will check the burst   
# and recombine process run time each chk-app-process-prd-secs to make sure the 
# process hasn't gotten into an infinite loop.  Failing to return from process- 
# ing within burst-proc-time-limit-secs and recombine-proc-time-limit-secs      
# respectively will be considered an infinite loop.                             
# ----------------------------------------------------------------------------- 

Monitor.loopPeriodSecs:        0.5
Monitor.ckDeadMsgsPrdSecs:     0.5
Monitor.chkAppCfgFileSecs:    30.0
Monitor.chkInfCfgFileSecs:    30.0
Monitor.chkAdapterConnsSecs:   0.5
Monitor.promoteSvrHistSecs:    1.0
Monitor.serverHistAvgPrdSecs: 10.0
Monitor.chkAppProcessPrdSecs:  1.0
Monitor.burstProcTmLimtSecs:   2.0
Monitor.recombineProcTmLimtSecs: 10.0


# ----------------------------------------------------------------------------- 
# SERVER HISTORY: If use-server-history-interval is set to yes, then each       
# promote-server-history-seconds (in monitor) the current server history        
# statistics will be promoted up to the cumulative statistics and the current   
# history reset to zero.  Requests to gain stastics will be made through the    
# socket port listed as the listening-port.  Up to a maximum of nbrConnections  
# requests can be handled concurrently, any more concurrent connections will be 
# refused.                                                                      
# ----------------------------------------------------------------------------- 

ServHist.useInterval:      yes
ServHist.listeningPort:    31310
ServHist.nbrConnections:   6


# ----------------------------------------------------------------------------- 
# MESSAGE CONTRIL: The initial array size of the message control.  If the array 
# runs out of space, then the array will be grown by the growthPercent.         
# Messages that wait for fragment replies for greater than timeoutSecs without  
# receiving all parts will be considered 'dead' and returned without the        
# outstanding parts.  The message lists will be checked every checkDeadSecs     
# seconds for messages that have waited longer than the timeout.                
# ----------------------------------------------------------------------------- 

Messages.initialCount:     50   # honored at startup only 
Messages.growthPercent:    100
Messages.timeoutSecs:      41.0


# -----------------------------------------------------------------------------
# MERCHANDISING: Merchandising may be disabled altogether by setting isEnabled 
# to "no".   The merchandising messages go to the same gateway as standard     
# bursts but with a different destination that handles merchandising queries.  
# Valid merchandising destinations are: MERCHPN, MERCHPP, MERCHQA, and MERCHDV.
# Like burst messages, queries than haven't received replies by the time       
# timeoutSecs has passed will be timed out and the combine process done with   
# only the replies that have already returned successfully.                    
# ----------------------------------------------------------------------------- 

Merchandise.isEnabled:     yes
Merchandise.destination:   MERCHDV
Merchandise.timeoutSecs:   5.0
Merchandise.ckDeadMsgsPrdSecs: 0.5


# ----------------------------------------------------------------------------- 
# BUFFER CONTROL: To diminish memory use and avoid often buggy memory           
# management in C, mamory buffers are checked out and returned from a store of  
# fixed size buffers held in a buffer manager.  This table provides the buffer 
# size (length in bytes), number of rows, and a growth percent for the storage  
# buffers.  Growth is used when the existing table becomes filled.  For         
# instance, (1024, 256, 50) will provide 256 buffers of 1024 characters length  
# each.  If all 256 buffers become used at once, then the burst process will    
# allocate another 0.5*256 = 128 rows, for a total of 384 rows.  If that        
# becomes filled, then the process will add anotehr 0.5*384 = 192 rows, for a   
# total of 576 rows, etc.                                                       
# ----------------------------------------------------------------------------- 

# NOTE: honored at startup only 
#                                    Start Grow     
#                              Size  Rows  Pct      
#                              ----- ----- ----     
Buffer.tableControl:      ( (    512,  128,  50 ), \
                            (   1024,   64,  50 ), \
                            (   2048,   96,  50 ), \
                            (   4096,   96,  50 ), \
                            (   8192,  768,  50 ), \
                            (  16384,  512,  50 ), \
                            (  32768,  512,  50 ), \
                            (  65536,  128,  50 ), \
                            ( 131072,   16,  50 ), \
                            ( 262144,   16,  50 ), \
                            ( 524288,   16,  50 ), \
                            (1048576,    4,  50 )  \
                          )



# ----------------------------------------------------------------------------- 
# SPLASH MONITOR DAEMON: These setting control the operation of the smonitord   
# maintenance script.  The script will loop continually every loop-period-secs  
# to check that splash and slogd are running, and that the CPU percent isn't    
# over max-CPU-percent.  If not running, the monitor daemon will start them.    
# if splash is over the CPU limit then it will stop and restart both.  On       
# restart, data files will be moved to the archive-dir directory.  The          
# log-stats-secs setting defines how frequently the process statistics will be  
# written to file, which are used by monitor scripts to display statistics to   
# non-splashuser accounts.  Due to competition between restart scripts, the     
# maintenance daemon will allow the executables to stay dead for not-running-   
# secs-restart before actually restarting.  The maintenance daemon will check   
# for changes to this file every check-for-config-change-secs seconds.  Due to  
# the looping nature of the script, all of the periods such as log-status-secs  
# are actually resolved to integral multiples of the loop-period-secs.          
# ----------------------------------------------------------------------------- 

Smonitord.loopPeriodSecs:  5
Smonitord.logStatusSecs:   30
Smonitord.notRunningSecsRestart: 10
Smonitord.overCPULimitSecsRestart: 20
Smonitord.chkForConfChangeSecs: 30
Smonitord.archiveDirectory: /mnt/splash/logs/archive
Smonitord.maxCPUPercent:   20.0


# ----------------------------------------------------------------------------- 
#                                           END OF FILE: infrastructure.conf    
# ----------------------------------------------------------------------------- 


